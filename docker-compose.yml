services:
    traefik:
        container_name: mpy-traefik
        image: "${TRAEFIK_VERSION}"
        command:
            --providers.docker=true
            --providers.docker.exposedByDefault=false
            --entryPoints.http.address=:80
        ports:
            - "${TRAEFIK_HTTP_PORT}"
        networks:
            - traefik-public
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public

    # NGINX WEB (FRONTEND) Service
    web:
        container_name: mpy-web
        build:
            context: "${DOCKER_CONTEXT}"
            dockerfile: development/web/Dockerfile
            args:
                - ARG_NGINX_VERSION=${NGINX_VERSION}
                - ARG_WEB_DIR=${APP_DIR}
        volumes:
            # Re-use local composer cache via host-volume
            - ~/.composer-docker/cache:/root/.composer/cache:delegated
            # Mount source-code for development
            - "${APP_VOLUMES_HOST}:${APP_VOLUMES_CONTAINER}"
        restart: unless-stopped
        tty: true
        ports:
            - "${WEB_PORT_HOST}:${WEB_PORT_CONTAINER}"
        networks:
            - traefik-public
            - default
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.mpy.rule=Host(`mpy.localhost`)
            - traefik.http.routers.mpy.entryPoints=http
            - traefik.http.services.mpy.loadBalancer.server.port=80

    # NGINX WEB (BACKEND) Service
    backend:
        container_name: mpy-backend
        build:
            context: "${DOCKER_CONTEXT}"
            dockerfile: development/backend/Dockerfile
            args:
                - ARG_NGINX_VERSION=${NGINX_VERSION}
                - ARG_BACKEND_DIR=${APP_DIR}
        volumes:
            # Re-use local composer cache via host-volume
            - ~/.composer-docker/cache:/root/.composer/cache:delegated
            # Mount source-code for development
            - "${APP_VOLUMES_HOST}:${APP_VOLUMES_CONTAINER}"
        restart: unless-stopped
        tty: true
        ports:
            - "${BACKEND_PORT_HOST}:${BACKEND_PORT_CONTAINER}"
        networks:
            - traefik-public
            - default
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.mpy.rule=Host(`mpy.localhost`)
            - traefik.http.routers.mpy.entryPoints=http
            - traefik.http.services.mpy.loadBalancer.server.port=80

    # NGINX WEB (STORAGE) Service
    storage:
        container_name: mpy-storage
        build:
            context: "${DOCKER_CONTEXT}"
            dockerfile: development/storage/Dockerfile
            args:
                - ARG_NGINX_VERSION=${NGINX_VERSION}
                - ARG_STORAGE_DIR=${APP_DIR}
        volumes:
            - "${APP_VOLUMES_HOST}:${APP_VOLUMES_CONTAINER}"
        restart: unless-stopped
        tty: true
        ports:
            - "${STORAGE_PORT_HOST}:${STORAGE_PORT_CONTAINER}"
        networks:
            - traefik-public
            - default
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.mpy.rule=Host(`mpy.localhost`)
            - traefik.http.routers.mpy.entryPoints=http
            - traefik.http.services.mpy.loadBalancer.server.port=80

    mpy-php-fpm:
        container_name: mpy-php-fpm
        build:
            context: "${DOCKER_CONTEXT}"
            dockerfile: development/php-fpm/Dockerfile
            args:
                - ARG_PHP_FPM_VERSION=${PHP_FPM_VERSION}
                - ARG_XDEBUG_VERSION=${XDEBUG_VERSION}
                - ARG_PHP_INI_DIR=${PHP_INI_DIR}
                - ARG_APP_DIR=${APP_DIR}
        environment:
            APP_ENV: "${APP_ENV}"
            APP_DEBUG: "${APP_DEBUG}"
            PHP_IDE_CONFIG: serverName="${SERVER_NAME}"
            DB_HOST: "${DB_HOST}"
            DB_USER: "${DB_USER}"
            DB_PASSWORD_FILE: /run/secrets/mpy_db_password
            DB_NAME: "${DB_NAME}"

            MAILER_HOST: mailer
            MAILER_PORT: 1025
            MAILER_USERNAME: app
            MAILER_PASSWORD_FILE: /run/secrets/mpy_mailer_password
            MAILER_FROM_EMAIL: mail@app.test
            FRONTEND_URL: http://localhost
            SENTRY_DSN_FILE: /run/secrets/sentry_dsn
            JWT_ENCRYPTION_KEY_FILE: /run/secrets/jwt_encryption_key
            JWT_PUBLIC_KEY_PATH: /run/secrets/jwt_public_key
            JWT_PRIVATE_KEY_PATH: /run/secrets/jwt_private_key
        volumes:
            - "${APP_VOLUMES_HOST}:${APP_VOLUMES_CONTAINER}"
        restart: unless-stopped
        secrets:
            - mpy_db_password
            - mpy_mailer_password
            - sentry_dsn
            - jwt_encryption_key
            - jwt_public_key
            - jwt_private_key

    mpy-php-cli:
        container_name: mpy-php-cli
        build:
            context: "${DOCKER_CONTEXT}"
            dockerfile: development/php-cli/Dockerfile
            args:
                - ARG_PHP_CLI_VERSION=${PHP_CLI_VERSION}
                - ARG_PHP_USER=${PHP_USER}
                - ARG_XDEBUG_VERSION=${XDEBUG_VERSION}
                - ARG_PHP_INI_DIR=${PHP_INI_DIR}
                - ARG_APP_DIR=${APP_DIR}
                - ARG_COMPOSER_ALLOW_SUPERUSER=${COMPOSER_ALLOW_SUPERUSER}
        restart: unless-stopped
        tty: true
        environment:
            APP_ENV: "${APP_ENV}"
            APP_DEBUG: "${APP_DEBUG}"
            DB_CONNECTION: "${DB_CONNECTION}"
            DB_HOST: "${DB_HOST}"
            DB_PORT: "${DB_PORT_CONTAINER}"
            DB_NAME: "${DB_NAME}"
            DB_USER: "${DB_USER}"
            DB_PASSWORD_FILE: /run/secrets/mpy_db_password

            MAILER_HOST: mailer
            MAILER_PORT: 1025
            MAILER_USERNAME: app
            MAILER_PASSWORD_FILE: /run/secrets/mpy_mailer_password
            MAILER_FROM_EMAIL: mail@app.test
            FRONTEND_URL: http://localhost
            SENTRY_DSN_FILE: /run/secrets/sentry_dsn
            JWT_ENCRYPTION_KEY_FILE: /run/secrets/jwt_encryption_key
            JWT_PUBLIC_KEY_PATH: /run/secrets/jwt_public_key
            JWT_PRIVATE_KEY_PATH: /run/secrets/jwt_private_key
        volumes:
            - "${APP_VOLUMES_HOST}:${APP_VOLUMES_CONTAINER}"
        secrets:
            - mpy_db_password
            - mpy_mailer_password
            - sentry_dsn
            - jwt_encryption_key
            - jwt_public_key
            - jwt_private_key

    wiremock:
        container_name: mpy-wiremock
        image: wiremock/wiremock:3x-alpine
        networks:
            - traefik-public
            - default
        volumes:
            - ./wiremock:/home/wiremock
        healthcheck:
            test: wget --no-verbose --tries=1 --spider http://localhost/__admin/health || exit 1
        command:
            - '--port=80'
            - '--global-response-templating'
            - '--verbose'
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.http.routers.wiremock.rule=Host(`wiremock.localhost`)
            - traefik.http.services.wiremock.loadBalancer.server.port=80
            - traefik.http.routers.wiremock.entryPoints=http

    pg:
        container_name: mpy-postgres
        image: postgres:14.0-alpine
        environment:
            POSTGRES_DB: "${DB_NAME}"
            POSTGRES_USER: "${DB_USER}"
            POSTGRES_PASSWORD_FILE: /run/secrets/mpy_db_password
        secrets:
            - mpy_db_password
        volumes:
            - mpy-postgres:/var/lib/postgresql/data
        restart: always
        ports:
            - "${DB_PORT_HOST}:${DB_PORT_CONTAINER}"

    mpy-adminer:
        container_name: mpy-adminer
        image: $ADMINER_VERSION
        restart: always
        ports:
            - "${ADMINER_PORT_HOST}:${ADMINER_PORT_CONTAINER}"

secrets:
    mpy_db_password:
        file: ./docker/development/secrets/mpy_db_password
    mpy_mailer_password:
        file: ./docker/development/secrets/mpy_mailer_password
    sentry_dsn:
        file: ./docker/development/secrets/sentry_dsn
    jwt_encryption_key:
        file: ./docker/development/secrets/jwt_encryption_key
    jwt_public_key:
        file: ./docker/development/secrets/jwt_public_key
    jwt_private_key:
        file: ./docker/development/secrets/jwt_private_key
    backup_aws_secret_access_key:
        file: ./docker/development/secrets/backup_aws_secret_access_key

volumes:
    mpy-postgres:

networks:
    traefik-public:
        name: traefik-public
